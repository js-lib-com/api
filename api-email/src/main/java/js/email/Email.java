package js.email;

import java.io.File;

/**
 * Template based email. An email object has content and all information needed for delivery, aka properties. Email
 * content is generated from a template and there are setters for properties. Optionally email can contain attached
 * files, see {@link #file(File...)}.
 * <p>
 * Email object is created by email sender, see {@link EmailSender#getEmail(String)}. Email body is generated by a
 * template engine that supports dynamic content injection. An email template has a name known on application scope that
 * is used by email sender to create email instance.
 * 
 * <pre>
 * EmailSender sender = ServiceLoader.load(EmailSender.clas).iterator().next();
 * ...
 * class Acount {
 *  String name;
 *  String password;
 *  String emailAddress;
 * }
 * ...
 * sender.getEmail("user-registration").subject("user registration").to(account.getEmailAddress()).send(account);
 * </pre>
 * 
 * <p>
 * In sample code, template name is <code>user-registration</code>. This name is used by email sender to locate template
 * file into templates repository. Template describe email content and has operators to inject dynamic content. Template
 * syntax depends on templates engine; here is template sample using X(HT)ML templates engine.
 * 
 * <pre>
 *  &lt;html&gt;
 *      &lt;body&gt;
 *          &lt;h3&gt;Dear &lt;span data-text="name"&gt;&lt;/span&gt;,&lt;/h3&gt;
 *          &lt;p&gt;Your password is &lt;span data-text="password"&gt;&lt;/span&gt;.&lt;/h3&gt;
 *          . . .
 *      &lt;/body&gt;
 *  &lt;/html&gt;
 * </pre>
 * <p>
 * In sample code, account instance has two properties, <code>name</code> and <code>password</code> that are injected
 * into template in <code>/hmtl/body/h3/span</code>, respective <code>/html/body/p/span</code> elements.
 * <p>
 * Before invoking {@link Email#send(Object...)} need to set email instance properties. In most generic use case only
 * <code>subject</code> and </code>to</code> address should be configured. Email sender has configurable default values
 * for other properties. This interface is designed for method chaining. It gave-up with Java Bean setter convention and
 * uses shorter, direct names. This way is possible to send and email in a single line of code:
 * 
 * <pre>
 * email.subject("user registration").from("from@mail.com").to("to@another.mail.com").cc("cc@yet.another.mail.com").send(account);
 * </pre>
 * <p>
 * Email property setters invocation order does not mater but of course should be called before send. Here is the list
 * of all supported properties:
 * <ul>
 * <li>{@link js.email.Email#to(String...) to} - mandatory list of email addresses for destinations; if this property is
 * missing email sending should fail,
 * <li>{@link js.email.Email#cc(String...) cc} - optional list of email addresses for copy carbon destinations,
 * <li>{@link js.email.Email#bcc(String...) bcc} - optional list of email addresses for blind copy carbon destinations,
 * <li>{@link js.email.Email#subject(String) subject} - email subject; this property is optional if email sender has
 * <code>js.email.subject</code> property,
 * <li>{@link js.email.Email#from(String) from} - originator email address; this property is optional if email sender
 * has <code>js.from.address</code> property,
 * <li>{@link js.email.Email#replyTo(String...) replyTo} - optional a list of email addresses where email reply should
 * be sent; if this property is missing sender uses <code>js.reply.to.address</code>, if any.
 * <li>{@link js.email.Email#envelopeFrom(String) envelopeFrom} - this is reverse path used by remote agent to send back
 * bounce message; if this property is missing sender uses <code>js.envelope.from.address</code>, if any,
 * </ul>
 * <p>
 * If need to set many email properties, like long list CC and BCC it is convenient to use email model base class, see
 * {@link EmailModel}.
 * 
 * <pre>
 * class AccountEmail extends EmailModel
 * {
 *   public AccountEmail(Account account)
 *   {
 *     super(account);
 *   }
 * 
 *   public String subject()
 *   {
 *     return "user registration";
 *   }
 * 
 *   public String to()
 *   {
 *     return user.getEmailAddress();
 *   }
 * 
 *   public String cc()
 *   {
 *     return "list of comma separated email addresses";
 *   }
 * }
 * ...
 * sender.getEmail("user-registration").send(new AccountEmail(account));
 * </pre>
 * 
 * @author Iulian Rotaru
 * @version final
 */
public interface Email
{
  /**
   * Return unique name for template used to create this email.
   * 
   * @return email template name.
   */
  String templateName();

  /**
   * Set this email content type.
   * 
   * @param contentType content type for this email instance.
   * @return this pointer.
   */
  Email contentType(String contentType);

  /**
   * Set sender email address. Given address syntax should be accepted by email service provider.
   * 
   * @param address sender email address.
   * @return this pointer.
   * @throws IllegalArgumentException if <code>address</code> parameter is null or empty.
   * @throws EmailException if <code>address</code> parameter is not valid.
   */
  Email from(String address);

  /**
   * Set envelope address used by reporting server to send bounce message. Note that this address should not have
   * personal data. Given address syntax should be accepted by email service provider.
   * 
   * @param address envelope from address.
   * @return this pointer.
   * @throws IllegalArgumentException if <code>address</code> parameter is null or empty.
   * @throws EmailException if <code>address</code> parameter is not valid, specifically if has personal data.
   */
  Email envelopeFrom(String address);

  /**
   * Set list of email addresses used to receive this email reply, if any. Given addresses syntax should be acceptable
   * for parsing by email service provider.
   * 
   * @param addresses reply addresses.
   * @return this pointer.
   * @throws IllegalArgumentException if no <code>address</code> provided or an <code>address</code> parameter is null
   *           or empty.
   * @throws EmailException if an <code>address</code> parameter is not valid.
   */
  Email replyTo(String... addresses);

  /**
   * Set list of addresses for this email destination. Given addresses syntax should be acceptable for parsing by email
   * service provider.
   * 
   * @param addresses destination email addresses.
   * @return this pointer.
   * @throws IllegalArgumentException if no <code>address</code> provided or an <code>address</code> parameter is null
   *           or empty.
   * @throws EmailException if an <code>address</code> parameter is not valid.
   */
  Email to(String... addresses);

  /**
   * Set list of email addresses for copy carbon destination. Given addresses syntax should be acceptable for parsing by
   * email service provider.
   * 
   * @param addresses addresses for copy carbon destination.
   * @return this pointer.
   * @throws IllegalArgumentException if no <code>address</code> provided or an <code>address</code> parameter is null
   *           or empty.
   * @throws EmailException if an <code>address</code> parameter is not valid.
   */
  Email cc(String... addresses);

  /**
   * Set list of email addresses for blind copy carbon destination. Given addresses syntax should be acceptable for
   * parsing by email service provider.
   * 
   * @param addresses addresses for blind copy carbon destination.
   * @return this pointer.
   * @throws IllegalArgumentException if no <code>address</code> provided or an <code>address</code> parameter is null
   *           or empty.
   * @throws EmailException if an <code>address</code> parameter is not valid.
   */
  Email bcc(String... addresses);

  /**
   * Set this email subject.
   * 
   * @param subject email subject.
   * @return this pointer.
   */
  Email subject(String subject);

  /**
   * Set attached files.
   * 
   * @param files files to attach to this email.
   * @return this pointer.
   */
  Email file(File... files);

  /**
   * Inject dynamic content into this email template and send it. Given <code>object</code> should have fields with the
   * name corresponding to named variables from template. It is implementation detail if template engine is strict or
   * relaxed regarding unresolved template variables.
   * 
   * <pre>
   * class User {
   * 	private String name;
   * 	private String account;
   * 	...
   * }
   * email.send(user);
   * </pre>
   * 
   * @param object optional dynamic content.
   * @throws EmailException if anything goes wrong on template injection or sending process.
   */
  void send(Object... object);
}
